AdminLogin.java
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */

/**
 *
 * @author Mona
 */
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.sql.*;

public class AdminLogin extends JFrame {
    private JTextField usernameField;
    private JPasswordField passwordField;

    public AdminLogin() {
        setTitle("Admin Login");
        setExtendedState(JFrame.MAXIMIZED_BOTH);
        setDefaultCloseOperation(EXIT_ON_CLOSE);
        getContentPane().setBackground(new Color(230, 240, 255));
        setLayout(null);

        Font labelFont = new Font("Segoe UI", Font.BOLD, 22);
        Font fieldFont = new Font("Segoe UI", Font.PLAIN, 18);

        JLabel title = new JLabel("Admin Login Portal");
        title.setFont(new Font("Segoe UI", Font.BOLD, 36));
        title.setForeground(new Color(33, 33, 99));
        title.setBounds(520, 80, 400, 50);
        add(title);

        JLabel usernameLabel = new JLabel("Username:");
        usernameLabel.setFont(labelFont);
        usernameLabel.setBounds(480, 200, 150, 30);
        add(usernameLabel);

        usernameField = new JTextField();
        usernameField.setFont(fieldFont);
        usernameField.setBounds(630, 200, 250, 35);
        add(usernameField);

        JLabel passwordLabel = new JLabel("Password:");
        passwordLabel.setFont(labelFont);
        passwordLabel.setBounds(480, 260, 150, 30);
        add(passwordLabel);

        passwordField = new JPasswordField();
        passwordField.setFont(fieldFont);
        passwordField.setBounds(630, 260, 250, 35);
        add(passwordField);

        JButton loginButton = new JButton("Login");
        loginButton.setFont(new Font("Segoe UI", Font.BOLD, 18));
        loginButton.setBackground(new Color(0, 123, 255));
        loginButton.setForeground(Color.WHITE);
        loginButton.setBounds(630, 320, 150, 40);
        add(loginButton);

        loginButton.addActionListener(e -> {
            String user = usernameField.getText();
            String pass = new String(passwordField.getPassword());

            if (user.equals("admin") && pass.equals("admin123")) {
                JOptionPane.showMessageDialog(null, "Login Successful!");
                openAdminDashboard();
            } else {
                JOptionPane.showMessageDialog(null, "Invalid Credentials", "Error", JOptionPane.ERROR_MESSAGE);
            }
        });

        setVisible(true);
    }

    private void openAdminDashboard() {
        JFrame dashboard = new JFrame("Admin Dashboard");
        dashboard.setSize(800, 500);
        dashboard.setLayout(null);
        dashboard.getContentPane().setBackground(new Color(240, 248, 255));

        JLabel label = new JLabel("Welcome, Admin! You are now logged in.");
        label.setFont(new Font("Segoe UI", Font.PLAIN, 22));
        label.setBounds(50, 30, 500, 40);
        dashboard.add(label);

        JButton checkPaymentsBtn = new JButton("Check Payment Status");
        checkPaymentsBtn.setBounds(50, 100, 250, 40);
        checkPaymentsBtn.setFont(new Font("Segoe UI", Font.BOLD, 16));
        dashboard.add(checkPaymentsBtn);
        checkPaymentsBtn.addActionListener(e -> openPaymentStatusWindow());

        JButton calculateSalaryBtn = new JButton("Calculate Instructor Salary");
        calculateSalaryBtn.setBounds(50, 160, 250, 40);
        calculateSalaryBtn.setFont(new Font("Segoe UI", Font.BOLD, 16));
        dashboard.add(calculateSalaryBtn);
        calculateSalaryBtn.addActionListener(e -> openSalaryCalculatorWindow());

        dashboard.setLocationRelativeTo(null);
        dashboard.setVisible(true);
    }

    private void openPaymentStatusWindow() {
        JFrame paymentFrame = new JFrame("Course Payment Status");
        paymentFrame.setSize(800, 400);
        paymentFrame.setLayout(new BorderLayout());

        String[] columnNames = {"Payment ID", "Student ID", "Course ID", "Type", "Date"};
        DefaultTableModel tableModel = new DefaultTableModel(columnNames, 0);
        JTable table = new JTable(tableModel);
        table.setFont(new Font("Segoe UI", Font.PLAIN, 14));
        table.setRowHeight(25);
        table.getTableHeader().setFont(new Font("Segoe UI", Font.BOLD, 14));
        table.setAutoResizeMode(JTable.AUTO_RESIZE_ALL_COLUMNS);

        try {
            Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/onlineedu", "root", "mona14");
            Statement stmt = conn.createStatement();
            ResultSet rs = stmt.executeQuery("SELECT * FROM payment");

            while (rs.next()) {
                Object[] row = {
                    rs.getInt("paymentid"),
                    rs.getInt("studentid"),
                    rs.getInt("courseid"),
                    rs.getString("payment_type"),
                    rs.getDate("payment_date")
                };
                tableModel.addRow(row);
            }

            conn.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error: " + e.getMessage());
        }

        JScrollPane scrollPane = new JScrollPane(table);
        paymentFrame.add(scrollPane, BorderLayout.CENTER);
        paymentFrame.setLocationRelativeTo(null);
        paymentFrame.setVisible(true);
    }

    private void openSalaryCalculatorWindow() {
        JFrame salaryFrame = new JFrame("Instructor Salary Calculator");
        salaryFrame.setSize(800, 400);
        salaryFrame.setLayout(new BorderLayout());

        String[] columnNames = {"First Name", "Students Enrolled", "Rate per Student", "Total Salary"};
        DefaultTableModel model = new DefaultTableModel(columnNames, 0);
        JTable table = new JTable(model);
        table.setFont(new Font("Segoe UI", Font.PLAIN, 14));
        table.setRowHeight(25);
        table.getTableHeader().setFont(new Font("Segoe UI", Font.BOLD, 14));

        try {
            Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/onlineedu", "root", "mona14");
            Statement stmt = conn.createStatement();

            String query = """
                SELECT i.firstname, COUNT(e.studentid) AS student_count
                FROM instructor i
                JOIN course c ON i.instructorid = c.instructorid
                JOIN enrollment e ON c.courseid = e.courseid
                GROUP BY i.instructorid
            """;

            ResultSet rs = stmt.executeQuery(query);
            double ratePerStudent = 500;

            while (rs.next()) {
                String name = rs.getString("firstname");
                int studentCount = rs.getInt("student_count");
                double totalSalary = studentCount * ratePerStudent;
                model.addRow(new Object[]{name, studentCount, "₹" + ratePerStudent, "₹" + totalSalary});
            }

            conn.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error: " + e.getMessage());
        }

        JScrollPane scrollPane = new JScrollPane(table);
        salaryFrame.add(scrollPane, BorderLayout.CENTER);
        salaryFrame.setLocationRelativeTo(null);
        salaryFrame.setVisible(true);
    }

    public static void main(String[] args) {
        new AdminLogin();
    }
}
-------------------------------------------------------------------------------------------
HomePage.java:
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */

/**
 *
 * @author Mona
 */
import javax.swing.*;
import java.awt.*;
import java.awt.event.*;

public class HomePage extends JFrame {

    public HomePage() {
        setTitle("Online Education and Tracking System");
        setExtendedState(JFrame.MAXIMIZED_BOTH);
        setDefaultCloseOperation(EXIT_ON_CLOSE);
        getContentPane().setBackground(new Color(230, 240, 255));
        setLayout(null);

        JLabel title = new JLabel("Online Education and Tracking System");
        title.setFont(new Font("Segoe UI", Font.BOLD, 36));
        title.setForeground(new Color(33, 33, 99));
        title.setBounds(350, 100, 800, 50);
        add(title);

        JButton adminBtn = createButton("Admin", 500, 220);
        JButton instructorBtn = createButton("Instructor", 500, 300);
        JButton studentBtn = createButton("Student", 500, 380);

        add(adminBtn);
        add(instructorBtn);
        add(studentBtn);

        // Action Listeners
        adminBtn.addActionListener(e -> {
            new AdminLogin(); // Open Admin Login directly
        });

        instructorBtn.addActionListener(e -> {
            showLoginSignupDialog("Instructor");
        });

        studentBtn.addActionListener(e -> {
            showLoginSignupDialog("Student");
        });

        setVisible(true);
    }

    private JButton createButton(String text, int x, int y) {
        JButton btn = new JButton(text);
        btn.setFont(new Font("Segoe UI", Font.BOLD, 20));
        btn.setBounds(x, y, 300, 50);
        btn.setBackground(new Color(0, 123, 255));
        btn.setForeground(Color.WHITE);
        return btn;
    }

    private void showLoginSignupDialog(String role) {
        String[] options = {"Login", "Signup"};
        int choice = JOptionPane.showOptionDialog(
                this,
                "Do you want to Login or Signup as " + role + "?",
                role + " Access",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE,
                null,
                options,
                options[0]
        );

        if (choice == 0) { // Login
            if (role.equals("Instructor")) {
                new InstructorLogin(); // ← should exist
            } else if (role.equals("Student")) {
                new StudentLogin(); // ← should exist
            }
        } else if (choice == 1) { // Signup
            if (role.equals("Instructor")) {
                new InstructorSignup(); // ← should exist
            } else if (role.equals("Student")) {
                new StudentSignup(); // ← should exist
            }
        }
    }

    public static void main(String[] args) {
        new HomePage();
    }
}
-------------------------------------------------------------------------------------------
Instructoraddassignmemt.java:
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */

/**
 *
 * @author Mona
 */
import java.awt.*;
import java.sql.*;
import javax.swing.*;

public class InstructorAddAssignment extends JFrame {
    private int instructorId;

    public InstructorAddAssignment(int instructorId) {
        this.instructorId = instructorId;
        initComponents();
    }

    private void initComponents() {
        setTitle("Add Assignment - Instructor Panel");
        setDefaultCloseOperation(EXIT_ON_CLOSE);
        setExtendedState(JFrame.MAXIMIZED_BOTH);
        setLayout(null);
        getContentPane().setBackground(new Color(245, 245, 255));

        Font titleFont = new Font("Segoe UI", Font.BOLD, 36);
        Font labelFont = new Font("Segoe UI", Font.PLAIN, 18);
        Font fieldFont = new Font("Segoe UI", Font.PLAIN, 16);

        JLabel title = new JLabel("Add Assignment");
        title.setFont(titleFont);
        title.setForeground(new Color(33, 33, 99));
        title.setBounds(600, 50, 400, 50);
        add(title);

        int xLabel = 450, xField = 600, yStart = 150, spacing = 60;

        JLabel courseIdLabel = new JLabel("Course ID:");
        courseIdLabel.setFont(labelFont);
        courseIdLabel.setBounds(xLabel, yStart, 150, 30);
        add(courseIdLabel);

        JTextField courseIdField = new JTextField();
        courseIdField.setFont(fieldFont);
        courseIdField.setBounds(xField, yStart, 250, 35);
        add(courseIdField);

        JLabel questionLabel = new JLabel("Question:");
        questionLabel.setFont(labelFont);
        questionLabel.setBounds(xLabel, yStart + spacing, 150, 30);
        add(questionLabel);

        JTextArea questionArea = new JTextArea();
        questionArea.setFont(fieldFont);
        JScrollPane scrollPane = new JScrollPane(questionArea);
        scrollPane.setBounds(xField, yStart + spacing, 250, 100);
        add(scrollPane);

        JLabel marksLabel = new JLabel("Total Marks:");
        marksLabel.setFont(labelFont);
        marksLabel.setBounds(xLabel, yStart + spacing * 3, 150, 30);
        add(marksLabel);

        JTextField marksField = new JTextField();
        marksField.setFont(fieldFont);
        marksField.setBounds(xField, yStart + spacing * 3, 250, 35);
        add(marksField);

        JButton submitButton = new JButton("Add Assignment");
        submitButton.setFont(new Font("Segoe UI", Font.BOLD, 18));
        submitButton.setBackground(new Color(33, 150, 243));
        submitButton.setForeground(Color.WHITE);
        submitButton.setBounds(xField, yStart + spacing * 4 + 10, 200, 45);
        add(submitButton);

        submitButton.addActionListener(e -> {
            String courseId = courseIdField.getText();
            String question = questionArea.getText();
            String marks = marksField.getText();

            try {
                Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/onlineedu", "root", "mona14");
                String query = "INSERT INTO assignment(courseid, question, marks, instructorid) VALUES (?, ?, ?, ?)";
                PreparedStatement stmt = conn.prepareStatement(query);
                stmt.setInt(1, Integer.parseInt(courseId));
                stmt.setString(2, question);
                stmt.setInt(3, Integer.parseInt(marks));
                stmt.setInt(4, instructorId); // associate with instructor

                int result = stmt.executeUpdate();
                JOptionPane.showMessageDialog(this, result > 0 ? "Assignment added!" : "Failed to add assignment");

                conn.close();

                if (result > 0) {
                    new InstructorDashboard(instructorId);
                    dispose();
                }
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "Error: " + ex.getMessage());
            }
        });

        setVisible(true);
    }
}
-------------------------------------------------------------------------------------------
InstructorAddCourse.java:
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */

/**
 *
 * @author Mona
 */
import java.awt.*;
import java.sql.*;
import javax.swing.*;

public class InstructorAddCourse extends JFrame {
    private int instructorId;

    public InstructorAddCourse(int instructorId) {
        this.instructorId = instructorId;
        initComponents();
    }

    private void initComponents() {
        setTitle("Add Course - Instructor Panel");
        setDefaultCloseOperation(EXIT_ON_CLOSE);
        setExtendedState(JFrame.MAXIMIZED_BOTH);
        setLayout(null);
        getContentPane().setBackground(new Color(245, 245, 255));

        Font titleFont = new Font("Segoe UI", Font.BOLD, 36);
        Font labelFont = new Font("Segoe UI", Font.PLAIN, 18);
        Font fieldFont = new Font("Segoe UI", Font.PLAIN, 16);

        JLabel title = new JLabel("Add Course");
        title.setFont(titleFont);
        title.setForeground(new Color(33, 33, 99));
        title.setBounds(600, 50, 400, 50);
        add(title);

        int xLabel = 450, xField = 600, yStart = 150, spacing = 60;

        JLabel cnameLabel = new JLabel("Course Name:");
        cnameLabel.setFont(labelFont);
        cnameLabel.setBounds(xLabel, yStart, 150, 30);
        add(cnameLabel);

        JTextField cnameField = new JTextField();
        cnameField.setFont(fieldFont);
        cnameField.setBounds(xField, yStart, 250, 35);
        add(cnameField);

        JLabel durationLabel = new JLabel("Duration:");
        durationLabel.setFont(labelFont);
        durationLabel.setBounds(xLabel, yStart + spacing, 150, 30);
        add(durationLabel);

        JTextField durationField = new JTextField();
        durationField.setFont(fieldFont);
        durationField.setBounds(xField, yStart + spacing, 250, 35);
        add(durationField);

        JLabel descLabel = new JLabel("Description:");
        descLabel.setFont(labelFont);
        descLabel.setBounds(xLabel, yStart + spacing * 2, 150, 30);
        add(descLabel);

        JTextField descField = new JTextField();
        descField.setFont(fieldFont);
        descField.setBounds(xField, yStart + spacing * 2, 250, 35);
        add(descField);

        JButton submitButton = new JButton("Add Course");
        submitButton.setFont(new Font("Segoe UI", Font.BOLD, 18));
        submitButton.setBackground(new Color(33, 150, 243));
        submitButton.setForeground(Color.WHITE);
        submitButton.setBounds(xField, yStart + spacing * 3 + 10, 180, 45);
        add(submitButton);

        submitButton.addActionListener(e -> {
            String name = cnameField.getText();
            String duration = durationField.getText();
            String desc = descField.getText();

            try {
                Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/onlineedu", "root", "mona14");
                String query = "INSERT INTO course(coursename, duration, description, instructorid) VALUES (?, ?, ?, ?)";
                PreparedStatement stmt = conn.prepareStatement(query);
                stmt.setString(1, name);
                stmt.setString(2, duration);
                stmt.setString(3, desc);
                stmt.setInt(4, instructorId); // link course to instructor

                int result = stmt.executeUpdate();
                JOptionPane.showMessageDialog(this, result > 0 ? "Course added!" : "Failed to add course");

                conn.close();

                if (result > 0) {
                    new InstructorDashboard(instructorId); // go back to dashboard
                    dispose();
                }

            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "Error: " + ex.getMessage());
            }
        });

        setVisible(true);
    }
}
-------------------------------------------------------------------------------------------
Instructor.java
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */

/**
 *
 * @author Mona
 */
import java.awt.*;
import javax.swing.*;

public class InstructorDashboard extends JFrame {
    private int instructorId;

    public InstructorDashboard(int instructorId) {
        this.instructorId = instructorId;
        initComponents();
    }

    private void initComponents() {
        setTitle("Instructor Dashboard");
        setDefaultCloseOperation(EXIT_ON_CLOSE);
        setExtendedState(JFrame.MAXIMIZED_BOTH);
        setLayout(null);
        getContentPane().setBackground(new Color(245, 245, 255));

        Font titleFont = new Font("Segoe UI", Font.BOLD, 36);
        Font buttonFont = new Font("Segoe UI", Font.BOLD, 18);

        JLabel title = new JLabel("Instructor Dashboard");
        title.setFont(titleFont);
        title.setForeground(new Color(33, 33, 99));
        title.setBounds(500, 100, 500, 50);
        add(title);

        JButton addCourseButton = new JButton("Add Course");
        addCourseButton.setFont(buttonFont);
        addCourseButton.setBackground(new Color(76, 175, 80));
        addCourseButton.setForeground(Color.WHITE);
        addCourseButton.setBounds(550, 200, 200, 50);
        add(addCourseButton);

        JButton addAssignmentButton = new JButton("Add Assignment");
        addAssignmentButton.setFont(buttonFont);
        addAssignmentButton.setBackground(new Color(33, 150, 243));
        addAssignmentButton.setForeground(Color.WHITE);
        addAssignmentButton.setBounds(550, 300, 200, 50);
        add(addAssignmentButton);

        addCourseButton.addActionListener(e -> {
            new InstructorAddCourse(instructorId);
            dispose();
        });

        addAssignmentButton.addActionListener(e -> {
            new InstructorAddAssignment(instructorId);
            dispose();
        });

        setVisible(true);
    }
}
-------------------------------------------------------------------------------------------
InstructorGradeSubmissson,java:
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */

/**
 *
 * @author Mona
 */
// InstructorGradeSubmissions.java
// InstructorGradeSubmissions.java
import javax.swing.*;
import java.awt.*;
import java.sql.*;

public class InstructorGradeSubmissions extends JFrame {

    public InstructorGradeSubmissions() {
        setTitle("Grade Submissions");
        setExtendedState(JFrame.MAXIMIZED_BOTH);
        setLayout(null);
        getContentPane().setBackground(new Color(245, 245, 255));

        Font labelFont = new Font("Segoe UI", Font.PLAIN, 18);

        JLabel title = new JLabel("Grade Submissions");
        title.setFont(new Font("Segoe UI", Font.BOLD, 32));
        title.setBounds(500, 40, 400, 40);
        add(title);

        DefaultListModel<String> model = new DefaultListModel<>();
        JList<String> submissionList = new JList<>(model);
        JScrollPane scrollPane = new JScrollPane(submissionList);
        scrollPane.setBounds(150, 120, 500, 400);
        add(scrollPane);

        JTextField marksField = new JTextField();
        marksField.setBounds(700, 200, 200, 30);
        add(marksField);

        JTextField gradeField = new JTextField();
        gradeField.setBounds(700, 250, 200, 30);
        add(gradeField);

        JButton gradeButton = new JButton("Assign Grade");
        gradeButton.setBounds(700, 300, 200, 40);
        gradeButton.setBackground(new Color(33, 150, 243));
        gradeButton.setForeground(Color.WHITE);
        add(gradeButton);

        // Load ungraded submissions
        try {
            Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/onlineedu", "root", "mona14");
            Statement stmt = conn.createStatement();
            ResultSet rs = stmt.executeQuery("SELECT submissionid, studentid, assignmentid, answer FROM submission WHERE marks IS NULL");

            while (rs.next()) {
                model.addElement(rs.getInt("submissionid") + " | Student: " + rs.getInt("studentid") +
                        ", Assignment: " + rs.getInt("assignmentid") + " | Answer: " + rs.getString("answer"));
            }

            conn.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error loading submissions: " + e.getMessage());
        }

        gradeButton.addActionListener(e -> {
            String selected = submissionList.getSelectedValue();
            if (selected == null) {
                JOptionPane.showMessageDialog(this, "Please select a submission to grade.");
                return;
            }

            if (marksField.getText().trim().isEmpty() || gradeField.getText().trim().isEmpty()) {
                JOptionPane.showMessageDialog(this, "Please enter both marks and grade.");
                return;
            }

            try {
                String[] parts = selected.split(" \\| ");
                int submissionId = Integer.parseInt(parts[0].trim());
                int marks = Integer.parseInt(marksField.getText().trim());
                String grade = gradeField.getText().trim();

                // Debug logs
                System.out.println("Selected: " + selected);
                System.out.println("Parsed Submission ID: " + submissionId);
                System.out.println("Marks: " + marks);
                System.out.println("Grade: " + grade);

                Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/onlineedu", "root", "mona14");
                String query = "UPDATE submission SET marks = ?, grade = ? WHERE submissionid = ?";
                PreparedStatement stmt = conn.prepareStatement(query);
                stmt.setInt(1, marks);
                stmt.setString(2, grade);
                stmt.setInt(3, submissionId);

                int updated = stmt.executeUpdate();

                if (updated > 0) {
                    JOptionPane.showMessageDialog(this, "Graded successfully!");
                    model.removeElement(selected); // Remove from list
                } else {
                    JOptionPane.showMessageDialog(this, "Failed to update submission.");
                }

                conn.close();
            } catch (NumberFormatException nfe) {
                JOptionPane.showMessageDialog(this, "Please enter a valid number for marks.");
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "Error: " + ex.getMessage());
            }
        });

        setVisible(true);
    }

    public static void main(String[] args) {
        new InstructorGradeSubmissions();
    }
}
-------------------------------------------------------------------------------------------
InstructorUpload.java:
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */

/**
 *
 * @author Mona
 */
import javax.swing.*;
import java.awt.*;
import java.sql.*;
import java.io.File;

public class InstructorUploadMaterial extends JFrame {
    private JComboBox<String> courseDropdown;
    private JTextField titleField, filePathField, instructorIdField;
    private JButton browseButton;

    public InstructorUploadMaterial(String instructorId) {
        initComponents();
        instructorIdField.setText(instructorId);
        instructorIdField.setEditable(false);
        loadInstructorCourses(instructorId);
    }

    private void initComponents() {
        setTitle("Upload Course Materials - Instructor Panel");
        setExtendedState(JFrame.MAXIMIZED_BOTH);
        setLayout(null);
        getContentPane().setBackground(new Color(245, 245, 255));

        Font titleFont = new Font("Segoe UI", Font.BOLD, 32);
        Font labelFont = new Font("Segoe UI", Font.PLAIN, 18);
        Font fieldFont = new Font("Segoe UI", Font.PLAIN, 16);

        JLabel heading = new JLabel("Upload Course Materials");
        heading.setFont(titleFont);
        heading.setBounds(480, 40, 500, 50);
        add(heading);

        JLabel instructorLabel = new JLabel("Instructor ID:");
        instructorLabel.setFont(labelFont);
        instructorLabel.setBounds(450, 130, 150, 30);
        add(instructorLabel);

        instructorIdField = new JTextField();
        instructorIdField.setFont(fieldFont);
        instructorIdField.setBounds(600, 130, 250, 35);
        add(instructorIdField);

        JLabel courseLabel = new JLabel("Select Course:");
        courseLabel.setFont(labelFont);
        courseLabel.setBounds(450, 190, 150, 30);
        add(courseLabel);

        courseDropdown = new JComboBox<>();
        courseDropdown.setFont(fieldFont);
        courseDropdown.setBounds(600, 190, 250, 35);
        add(courseDropdown);

        JLabel titleLabel = new JLabel("Material Title:");
        titleLabel.setFont(labelFont);
        titleLabel.setBounds(450, 250, 150, 30);
        add(titleLabel);

        titleField = new JTextField();
        titleField.setFont(fieldFont);
        titleField.setBounds(600, 250, 250, 35);
        add(titleField);

        JLabel fileLabel = new JLabel("Select File:");
        fileLabel.setFont(labelFont);
        fileLabel.setBounds(450, 310, 150, 30);
        add(fileLabel);

        filePathField = new JTextField();
        filePathField.setFont(fieldFont);
        filePathField.setBounds(600, 310, 250, 35);
        filePathField.setEditable(false);
        add(filePathField);

        browseButton = new JButton("Browse...");
        browseButton.setFont(new Font("Segoe UI", Font.PLAIN, 16));
        browseButton.setBounds(860, 310, 120, 35);
        add(browseButton);

        browseButton.addActionListener(e -> selectFile());

        JButton uploadButton = new JButton("Upload Material");
        uploadButton.setFont(new Font("Segoe UI", Font.BOLD, 18));
        uploadButton.setBounds(600, 380, 220, 40);
        uploadButton.setBackground(new Color(76, 175, 80));
        uploadButton.setForeground(Color.WHITE);
        add(uploadButton);

        uploadButton.addActionListener(e -> uploadMaterial());

        setVisible(true);
    }

    private void loadInstructorCourses(String instructorId) {
        try (Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/onlineedu", "root", "mona14")) {
            String query = "SELECT courseid, coursename FROM course WHERE instructorid = ?";
            PreparedStatement ps = conn.prepareStatement(query);
            ps.setInt(1, Integer.parseInt(instructorId));
            ResultSet rs = ps.executeQuery();

            while (rs.next()) {
                int courseId = rs.getInt("courseid");
                String courseName = rs.getString("coursename");
                courseDropdown.addItem(courseId + " - " + courseName);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error loading courses: " + e.getMessage());
        }
    }

    private void selectFile() {
        JFileChooser fileChooser = new JFileChooser();
        int option = fileChooser.showOpenDialog(this);
        if (option == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();
            filePathField.setText(selectedFile.getAbsolutePath());
        }
    }

    private void uploadMaterial() {
        String selectedCourse = (String) courseDropdown.getSelectedItem();
        String title = titleField.getText().trim();
        String filePath = filePathField.getText().trim();

        if (selectedCourse == null || title.isEmpty() || filePath.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please fill in all fields.");
            return;
        }

        int courseId = Integer.parseInt(selectedCourse.split(" - ")[0]);

        try (Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/onlineedu", "root", "mona14")) {
            String query = "INSERT INTO coursematerial (courseid, title, filepath) VALUES (?, ?, ?)";
            PreparedStatement ps = conn.prepareStatement(query);
            ps.setInt(1, courseId);
            ps.setString(2, title);
            ps.setString(3, filePath);
            ps.executeUpdate();

            JOptionPane.showMessageDialog(this, "Course material uploaded successfully.");
            titleField.setText("");
            filePathField.setText("");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error uploading material: " + e.getMessage());
        }
    }

    public static void main(String[] args) {
        String instructorId = JOptionPane.showInputDialog(null, "Enter Instructor ID:");
        if (instructorId != null && !instructorId.trim().isEmpty()) {
            new InstructorUploadMaterial(instructorId.trim());
        } else {
            JOptionPane.showMessageDialog(null, "Instructor ID is required.");
        }
    }
}
-------------------------------------------------------------------------------------------
StudentCourseMaterial.java:
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */

/**
 *
 * @author Mona
 */
import javax.swing.*;
import java.awt.*;
import java.sql.*;

public class StudentCourseMaterial extends JFrame {
    private JComboBox<String> courseDropdown;
    private JTextArea materialDisplay;
    private JTextField studentIdField;
    private String currentStudentId;

    public StudentCourseMaterial(String studentId) {
        currentStudentId = studentId;
        initComponents();
        studentIdField.setText(studentId);
        studentIdField.setEditable(false);
        loadEnrolledCourses(studentId);
    }

    private void initComponents() {
        setTitle("Course Materials - Student Panel");
        setExtendedState(JFrame.MAXIMIZED_BOTH);
        setLayout(null);
        getContentPane().setBackground(new Color(245, 245, 255));

        Font titleFont = new Font("Segoe UI", Font.BOLD, 32);
        Font labelFont = new Font("Segoe UI", Font.PLAIN, 18);
        Font fieldFont = new Font("Segoe UI", Font.PLAIN, 16);

        JLabel title = new JLabel("View Course Materials");
        title.setFont(titleFont);
        title.setBounds(500, 40, 400, 50);
        add(title);

        JLabel studentIdLabel = new JLabel("Student ID:");
        studentIdLabel.setFont(labelFont);
        studentIdLabel.setBounds(450, 130, 150, 30);
        add(studentIdLabel);

        studentIdField = new JTextField();
        studentIdField.setFont(fieldFont);
        studentIdField.setBounds(600, 130, 250, 35);
        add(studentIdField);

        JLabel courseLabel = new JLabel("Select Course:");
        courseLabel.setFont(labelFont);
        courseLabel.setBounds(450, 200, 150, 30);
        add(courseLabel);

        courseDropdown = new JComboBox<>();
        courseDropdown.setFont(fieldFont);
        courseDropdown.setBounds(600, 200, 250, 35);
        add(courseDropdown);

        JButton viewButton = new JButton("View Materials");
        viewButton.setFont(new Font("Segoe UI", Font.BOLD, 18));
        viewButton.setBounds(600, 260, 200, 40);
        viewButton.setBackground(new Color(33, 150, 243));
        viewButton.setForeground(Color.WHITE);
        add(viewButton);

        materialDisplay = new JTextArea();
        materialDisplay.setEditable(false);
        materialDisplay.setFont(fieldFont);
        JScrollPane scrollPane = new JScrollPane(materialDisplay);
        scrollPane.setBounds(400, 330, 600, 300);
        add(scrollPane);

        JButton submitAssignmentBtn = new JButton("View"
                + " Assignment");
        submitAssignmentBtn.setFont(new Font("Segoe UI", Font.BOLD, 18));
        submitAssignmentBtn.setBounds(600, 650, 200, 40);
        submitAssignmentBtn.setBackground(new Color(76, 175, 80));
        submitAssignmentBtn.setForeground(Color.WHITE);
        add(submitAssignmentBtn);

        viewButton.addActionListener(e -> loadMaterials());
        submitAssignmentBtn.addActionListener(e -> {
            int sid = Integer.parseInt(currentStudentId);
            new StudentSubmitAssignment(sid);
            dispose();
        });

        setVisible(true);
    }

    private void loadEnrolledCourses(String studentId) {
        try (Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/onlineedu", "root", "mona14")) {
            String query = "SELECT c.courseid, c.coursename FROM course c " +
                           "JOIN enrollment e ON c.courseid = e.courseid WHERE e.studentid = ?";
            PreparedStatement ps = conn.prepareStatement(query);
            ps.setInt(1, Integer.parseInt(studentId));
            ResultSet rs = ps.executeQuery();

            while (rs.next()) {
                int courseId = rs.getInt("courseid");
                String name = rs.getString("coursename");
                courseDropdown.addItem(courseId + " - " + name);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error loading enrolled courses: " + e.getMessage());
        }
    }

    private void loadMaterials() {
        String selectedCourse = (String) courseDropdown.getSelectedItem();
        if (selectedCourse == null) {
            JOptionPane.showMessageDialog(this, "Please select a course.");
            return;
        }

        int courseId = Integer.parseInt(selectedCourse.split(" - ")[0]);
        materialDisplay.setText("");

        try (Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/onlineedu", "root", "mona14")) {
            String query = "SELECT title, filepath FROM coursematerial WHERE courseid = ?";
            PreparedStatement ps = conn.prepareStatement(query);
            ps.setInt(1, courseId);
            ResultSet rs = ps.executeQuery();

            StringBuilder materials = new StringBuilder();
            while (rs.next()) {
                materials.append("Title: ").append(rs.getString("title")).append("\n");
                materials.append("Filepath: ").append(rs.getString("filepath")).append("\n\n");
            }

            if (materials.length() == 0) {
                materialDisplay.setText("No materials available for this course.");
            } else {
                materialDisplay.setText(materials.toString());
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error loading course materials: " + e.getMessage());
        }
    }

    public static void main(String[] args) {
        String inputId = JOptionPane.showInputDialog(null, "Enter Student ID:");
        if (inputId != null && !inputId.trim().isEmpty()) {
            new StudentCourseMaterial(inputId.trim());
        } else {
            JOptionPane.showMessageDialog(null, "Student ID required to proceed.");
        }
    }
}
-------------------------------------------------------------------------------------------
StudentenrollCourse.java:
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */

/**
 *
 * @author Mona
 */
import javax.swing.*;
import java.awt.*;
import java.sql.*;
import java.time.LocalDate;

public class StudentEnrollCourse extends JFrame {
    private JComboBox<String> courseDropdown;
    private JTextField studentIdField;
    private JComboBox<String> paymentTypeDropdown;

    public StudentEnrollCourse() {
        initComponents();
    }

    public StudentEnrollCourse(String studentId) {
        initComponents();
        studentIdField.setText(studentId);
        studentIdField.setEditable(false);
    }

    private void initComponents() {
        setTitle("Enroll in Course - Student Panel");
        setExtendedState(JFrame.MAXIMIZED_BOTH);
        setLayout(null);
        getContentPane().setBackground(new Color(245, 245, 255));

        Font titleFont = new Font("Segoe UI", Font.BOLD, 32);
        Font labelFont = new Font("Segoe UI", Font.PLAIN, 18);
        Font fieldFont = new Font("Segoe UI", Font.PLAIN, 16);

        JLabel title = new JLabel("Enroll in a Course");
        title.setFont(titleFont);
        title.setBounds(500, 40, 400, 50);
        add(title);

        JLabel studentIdLabel = new JLabel("Student ID:");
        studentIdLabel.setFont(labelFont);
        studentIdLabel.setBounds(450, 150, 150, 30);
        add(studentIdLabel);

        studentIdField = new JTextField();
        studentIdField.setFont(fieldFont);
        studentIdField.setBounds(600, 150, 250, 35);
        add(studentIdField);

        JLabel courseLabel = new JLabel("Select Course:");
        courseLabel.setFont(labelFont);
        courseLabel.setBounds(450, 220, 150, 30);
        add(courseLabel);

        courseDropdown = new JComboBox<>();
        courseDropdown.setFont(fieldFont);
        courseDropdown.setBounds(600, 220, 250, 35);
        add(courseDropdown);

        JLabel paymentLabel = new JLabel("Payment Type:");
        paymentLabel.setFont(labelFont);
        paymentLabel.setBounds(450, 290, 150, 30);
        add(paymentLabel);

        paymentTypeDropdown = new JComboBox<>(new String[]{"Credit Card", "UPI", "Net Banking", "Cash"});
        paymentTypeDropdown.setFont(fieldFont);
        paymentTypeDropdown.setBounds(600, 290, 250, 35);
        add(paymentTypeDropdown);

        JButton enrollButton = new JButton("Enroll & Pay");
        enrollButton.setFont(new Font("Segoe UI", Font.BOLD, 18));
        enrollButton.setBounds(600, 360, 200, 40);
        enrollButton.setBackground(new Color(33, 150, 243));
        enrollButton.setForeground(Color.WHITE);
        add(enrollButton);

        loadCourses();

        enrollButton.addActionListener(e -> enrollAndProcessPayment());

        setVisible(true);
    }

    private void loadCourses() {
        try (Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/onlineedu", "root", "mona14");
             Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery("SELECT courseid, coursename FROM course")) {
            while (rs.next()) {
                int id = rs.getInt("courseid");
                String name = rs.getString("coursename");
                courseDropdown.addItem(id + " - " + name);
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Error loading courses: " + ex.getMessage());
        }
    }

    private void enrollAndProcessPayment() {
        String studentId = studentIdField.getText().trim();
        String selectedCourse = (String) courseDropdown.getSelectedItem();
        String paymentType = (String) paymentTypeDropdown.getSelectedItem();

        if (studentId.isEmpty() || selectedCourse == null || paymentType == null) {
            JOptionPane.showMessageDialog(this, "Please enter all fields.");
            return;
        }

        int courseId = Integer.parseInt(selectedCourse.split(" - ")[0]);

        try (Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/onlineedu", "root", "mona14")) {
            String enrollQuery = "INSERT INTO enrollment(studentid, courseid) VALUES (?, ?)";
            PreparedStatement enrollStmt = conn.prepareStatement(enrollQuery);
            enrollStmt.setInt(1, Integer.parseInt(studentId));
            enrollStmt.setInt(2, courseId);
            enrollStmt.executeUpdate();

            String paymentQuery = "INSERT INTO payment(studentid, courseid, payment_type, payment_date) VALUES (?, ?, ?, ?)";
            PreparedStatement paymentStmt = conn.prepareStatement(paymentQuery);
            paymentStmt.setInt(1, Integer.parseInt(studentId));
            paymentStmt.setInt(2, courseId);
            paymentStmt.setString(3, paymentType);
            paymentStmt.setDate(4, Date.valueOf(LocalDate.now()));

            int payResult = paymentStmt.executeUpdate();
            if (payResult > 0) {
                JOptionPane.showMessageDialog(this, "Enrollment and Payment successful!");
                // After successful payment, open the StudentCourseMaterial page
                new StudentCourseMaterial(studentId); // Passing student ID to view materials
                this.dispose(); // Close the current enrollment page
            } else {
                JOptionPane.showMessageDialog(this, "Enrollment done but payment failed.");
            }

        } catch (SQLIntegrityConstraintViolationException dup) {
            JOptionPane.showMessageDialog(this, "Already enrolled in this course.");
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Error: " + ex.getMessage());
        }
    }

    public static void main(String[] args) {
        new StudentEnrollCourse();
    }
}
-------------------------------------------------------------------------------------------
StudentSubmitassignmemt.java:
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */

/**
 *
 * @author Mona
 */
// StudentSubmitAssignment.java
// StudentSubmitAssignment.java
import javax.swing.*;
import java.awt.*;
import java.sql.*;

public class StudentSubmitAssignment extends JFrame {
    public StudentSubmitAssignment(int studentId) {
        setTitle("Submit Assignment");
        setExtendedState(JFrame.MAXIMIZED_BOTH);
        setLayout(null);
        getContentPane().setBackground(new Color(245, 245, 255));

        Font labelFont = new Font("Segoe UI", Font.PLAIN, 18);
        Font fieldFont = new Font("Segoe UI", Font.PLAIN, 16);

        JLabel title = new JLabel("Submit Assignment");
        title.setFont(new Font("Segoe UI", Font.BOLD, 32));
        title.setBounds(550, 40, 400, 40);
        add(title);

        JLabel assignmentLabel = new JLabel("Select Assignment:");
        assignmentLabel.setFont(labelFont);
        assignmentLabel.setBounds(400, 120, 180, 30);
        add(assignmentLabel);

        JComboBox<String> assignmentCombo = new JComboBox<>();
        assignmentCombo.setBounds(600, 120, 300, 30);
        add(assignmentCombo);

        JTextArea answerArea = new JTextArea();
        answerArea.setFont(fieldFont);
        JScrollPane scrollPane = new JScrollPane(answerArea);
        scrollPane.setBounds(400, 180, 500, 200);
        add(scrollPane);

        JButton submitBtn = new JButton("Submit");
        submitBtn.setBounds(550, 420, 150, 40);
        submitBtn.setBackground(new Color(33, 150, 243));
        submitBtn.setForeground(Color.WHITE);
        submitBtn.setFont(new Font("Segoe UI", Font.BOLD, 18));
        add(submitBtn);

        // Load assignments based on enrolled courses
        try {
            Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/onlineedu", "root", "mona14");
            String query = "SELECT a.assignmentid, a.question " +
                           "FROM assignment a " +
                           "JOIN enrollment e ON a.courseid = e.courseid " +
                           "WHERE e.studentid = ?";
            PreparedStatement ps = conn.prepareStatement(query);
            ps.setInt(1, studentId);
            ResultSet rs = ps.executeQuery();

            while (rs.next()) {
                assignmentCombo.addItem(rs.getInt("assignmentid") + ": " + rs.getString("question"));
            }

            conn.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error loading assignments: " + e.getMessage());
        }

        submitBtn.addActionListener(e -> {
            String selected = (String) assignmentCombo.getSelectedItem();
            if (selected == null) {
                JOptionPane.showMessageDialog(this, "Please select an assignment.");
                return;
            }

            int assignmentId = Integer.parseInt(selected.split(":")[0]);
            String answer = answerArea.getText().trim();

            if (answer.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Please enter your answer before submitting.");
                return;
            }

            try {
                Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/onlineedu", "root", "mona14");
                String query = "INSERT INTO submission(studentid, assignmentid, answer) VALUES (?, ?, ?)";
                PreparedStatement stmt = conn.prepareStatement(query);
                stmt.setInt(1, studentId);
                stmt.setInt(2, assignmentId);
                stmt.setString(3, answer);
                stmt.executeUpdate();

                JOptionPane.showMessageDialog(this, "Submission successful!");
                conn.close();
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "Error: " + ex.getMessage());
            }
        });

        setVisible(true);
    }

    public static void main(String[] args) {
        new StudentSubmitAssignment(1); // replace with actual student ID after login
    }
}
